{"version":3,"sources":["webpack:///protected_branches.fd808e43ba6d4ed167dd.bundle.js","webpack:///./protected_branches/protected_branches_bundle.js","webpack:///./protected_branches/protected_branch_edit.js","webpack:///./protected_branches/protected_branch_dropdown.js","webpack:///./protected_branches/protected_branch_access_dropdown.js","webpack:///./protected_branches/protected_branch_create.js","webpack:///./protected_branches/protected_branch_edit_list.js"],"names":["webpackJsonp","3V7F","module","exports","__webpack_require__","L6VT","$","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","gl","ProtectedBranchEdit","_class","options","this","$wrap","$allowedToMergeDropdown","find","$allowedToPushDropdown","buildDropdowns","value","ProtectedBranchAccessDropdown","$dropdown","data","gon","merge_access_levels","onSelect","bind","push_access_levels","_this","$allowedToMergeInput","$allowedToPushInput","disable","ajax","type","url","dataType","_method","protected_branch","merge_access_levels_attributes","id","access_level","val","push_access_levels_attributes","error","scrollTo","Flash","always","enable","window","call","OILV","ProtectedBranchDropdown","$dropdownContainer","parent","$dropdownFooter","$protectedBranch","buildDropdown","bindEvents","addClass","glDropdown","getProtectedBranches","filterable","remote","search","fields","selectable","toggleLabel","selected","title","fieldName","text","protectedBranch","_","escape","onFilter","toggleCreateNewButton","clicked","item","$el","e","preventDefault","on","onClickCreateWildcard","execute","selectRowAtIndex","term","callback","selectedBranch","open_branches","concat","branchName","toggleClass","Peub","inputId","el","is","UPQU","ProtectedBranchCreate","$form","onSelectCallback","$branchInput","attr","jxF6","ProtectedBranchEditList","each"],"mappings":"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","file":"protected_branches.fd808e43ba6d4ed167dd.bundle.js","sourcesContent":["webpackJsonp([19],{\n\n/***/ \"3V7F\":\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(\"Peub\");\n__webpack_require__(\"UPQU\");\n__webpack_require__(\"OILV\");\n__webpack_require__(\"L6VT\");\n__webpack_require__(\"jxF6\");\n\n/***/ }),\n\n/***/ \"L6VT\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function($) {var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* eslint-disable no-new, arrow-parens, no-param-reassign, comma-dangle, max-len */\n/* global Flash */\n\n(function (global) {\n  global.gl = global.gl || {};\n\n  gl.ProtectedBranchEdit = function () {\n    function _class(options) {\n      _classCallCheck(this, _class);\n\n      this.$wrap = options.$wrap;\n      this.$allowedToMergeDropdown = this.$wrap.find('.js-allowed-to-merge');\n      this.$allowedToPushDropdown = this.$wrap.find('.js-allowed-to-push');\n\n      this.buildDropdowns();\n    }\n\n    _createClass(_class, [{\n      key: 'buildDropdowns',\n      value: function buildDropdowns() {\n        // Allowed to merge dropdown\n        new gl.ProtectedBranchAccessDropdown({\n          $dropdown: this.$allowedToMergeDropdown,\n          data: gon.merge_access_levels,\n          onSelect: this.onSelect.bind(this)\n        });\n\n        // Allowed to push dropdown\n        new gl.ProtectedBranchAccessDropdown({\n          $dropdown: this.$allowedToPushDropdown,\n          data: gon.push_access_levels,\n          onSelect: this.onSelect.bind(this)\n        });\n      }\n    }, {\n      key: 'onSelect',\n      value: function onSelect() {\n        var _this = this;\n\n        var $allowedToMergeInput = this.$wrap.find('input[name=\"' + this.$allowedToMergeDropdown.data('fieldName') + '\"]');\n        var $allowedToPushInput = this.$wrap.find('input[name=\"' + this.$allowedToPushDropdown.data('fieldName') + '\"]');\n\n        // Do not update if one dropdown has not selected any option\n        if (!($allowedToMergeInput.length && $allowedToPushInput.length)) return;\n\n        this.$allowedToMergeDropdown.disable();\n        this.$allowedToPushDropdown.disable();\n\n        $.ajax({\n          type: 'POST',\n          url: this.$wrap.data('url'),\n          dataType: 'json',\n          data: {\n            _method: 'PATCH',\n            protected_branch: {\n              merge_access_levels_attributes: [{\n                id: this.$allowedToMergeDropdown.data('access-level-id'),\n                access_level: $allowedToMergeInput.val()\n              }],\n              push_access_levels_attributes: [{\n                id: this.$allowedToPushDropdown.data('access-level-id'),\n                access_level: $allowedToPushInput.val()\n              }]\n            }\n          },\n          error: function error() {\n            $.scrollTo(0);\n            new Flash('Failed to update branch!');\n          }\n        }).always(function () {\n          _this.$allowedToMergeDropdown.enable();\n          _this.$allowedToPushDropdown.enable();\n        });\n      }\n    }]);\n\n    return _class;\n  }();\n})(window);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"OILV\":\n/***/ (function(module, exports) {\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* eslint-disable comma-dangle, no-unused-vars */\n\nvar ProtectedBranchDropdown = function () {\n  function ProtectedBranchDropdown(options) {\n    _classCallCheck(this, ProtectedBranchDropdown);\n\n    this.onSelect = options.onSelect;\n    this.$dropdown = options.$dropdown;\n    this.$dropdownContainer = this.$dropdown.parent();\n    this.$dropdownFooter = this.$dropdownContainer.find('.dropdown-footer');\n    this.$protectedBranch = this.$dropdownContainer.find('.js-create-new-protected-branch');\n\n    this.buildDropdown();\n    this.bindEvents();\n\n    // Hide footer\n    this.$dropdownFooter.addClass('hidden');\n  }\n\n  _createClass(ProtectedBranchDropdown, [{\n    key: 'buildDropdown',\n    value: function buildDropdown() {\n      var _this = this;\n\n      this.$dropdown.glDropdown({\n        data: this.getProtectedBranches.bind(this),\n        filterable: true,\n        remote: false,\n        search: {\n          fields: ['title']\n        },\n        selectable: true,\n        toggleLabel: function toggleLabel(selected) {\n          return selected && 'id' in selected ? selected.title : 'Protected Branch';\n        },\n\n        fieldName: 'protected_branch[name]',\n        text: function text(protectedBranch) {\n          return _.escape(protectedBranch.title);\n        },\n        id: function id(protectedBranch) {\n          return _.escape(protectedBranch.id);\n        },\n\n        onFilter: this.toggleCreateNewButton.bind(this),\n        clicked: function clicked(item, $el, e) {\n          e.preventDefault();\n          _this.onSelect();\n        }\n      });\n    }\n  }, {\n    key: 'bindEvents',\n    value: function bindEvents() {\n      this.$protectedBranch.on('click', this.onClickCreateWildcard.bind(this));\n    }\n  }, {\n    key: 'onClickCreateWildcard',\n    value: function onClickCreateWildcard(e) {\n      e.preventDefault();\n\n      // Refresh the dropdown's data, which ends up calling `getProtectedBranches`\n      this.$dropdown.data('glDropdown').remote.execute();\n      this.$dropdown.data('glDropdown').selectRowAtIndex();\n    }\n  }, {\n    key: 'getProtectedBranches',\n    value: function getProtectedBranches(term, callback) {\n      if (this.selectedBranch) {\n        callback(gon.open_branches.concat(this.selectedBranch));\n      } else {\n        callback(gon.open_branches);\n      }\n    }\n  }, {\n    key: 'toggleCreateNewButton',\n    value: function toggleCreateNewButton(branchName) {\n      this.selectedBranch = {\n        title: branchName,\n        id: branchName,\n        text: branchName\n      };\n\n      if (branchName) {\n        this.$dropdownContainer.find('.js-create-new-protected-branch code').text(branchName);\n      }\n\n      this.$dropdownFooter.toggleClass('hidden', !branchName);\n    }\n  }]);\n\n  return ProtectedBranchDropdown;\n}();\n\nwindow.ProtectedBranchDropdown = ProtectedBranchDropdown;\n\n/***/ }),\n\n/***/ \"Peub\":\n/***/ (function(module, exports) {\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* eslint-disable arrow-parens, no-param-reassign, object-shorthand, no-else-return, comma-dangle, max-len */\n\n(function (global) {\n  global.gl = global.gl || {};\n\n  gl.ProtectedBranchAccessDropdown = function () {\n    function _class(options) {\n      _classCallCheck(this, _class);\n\n      var $dropdown = options.$dropdown,\n          data = options.data,\n          onSelect = options.onSelect;\n\n\n      $dropdown.glDropdown({\n        data: data,\n        selectable: true,\n        inputId: $dropdown.data('input-id'),\n        fieldName: $dropdown.data('field-name'),\n        toggleLabel: function toggleLabel(item, el) {\n          if (el.is('.is-active')) {\n            return item.text;\n          } else {\n            return 'Select';\n          }\n        },\n        clicked: function clicked(item, $el, e) {\n          e.preventDefault();\n          onSelect();\n        }\n      });\n    }\n\n    return _class;\n  }();\n})(window);\n\n/***/ }),\n\n/***/ \"UPQU\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function($) {var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* eslint-disable no-new, arrow-parens, no-param-reassign, comma-dangle, max-len */\n/* global ProtectedBranchDropdown */\n\n(function (global) {\n  global.gl = global.gl || {};\n\n  gl.ProtectedBranchCreate = function () {\n    function _class() {\n      _classCallCheck(this, _class);\n\n      this.$wrap = this.$form = $('#new_protected_branch');\n      this.buildDropdowns();\n    }\n\n    _createClass(_class, [{\n      key: 'buildDropdowns',\n      value: function buildDropdowns() {\n        var $allowedToMergeDropdown = this.$wrap.find('.js-allowed-to-merge');\n        var $allowedToPushDropdown = this.$wrap.find('.js-allowed-to-push');\n\n        // Cache callback\n        this.onSelectCallback = this.onSelect.bind(this);\n\n        // Allowed to Merge dropdown\n        new gl.ProtectedBranchAccessDropdown({\n          $dropdown: $allowedToMergeDropdown,\n          data: gon.merge_access_levels,\n          onSelect: this.onSelectCallback\n        });\n\n        // Allowed to Push dropdown\n        new gl.ProtectedBranchAccessDropdown({\n          $dropdown: $allowedToPushDropdown,\n          data: gon.push_access_levels,\n          onSelect: this.onSelectCallback\n        });\n\n        // Select default\n        $allowedToPushDropdown.data('glDropdown').selectRowAtIndex(0);\n        $allowedToMergeDropdown.data('glDropdown').selectRowAtIndex(0);\n\n        // Protected branch dropdown\n        new ProtectedBranchDropdown({\n          $dropdown: this.$wrap.find('.js-protected-branch-select'),\n          onSelect: this.onSelectCallback\n        });\n      }\n\n      // This will run after clicked callback\n\n    }, {\n      key: 'onSelect',\n      value: function onSelect() {\n        // Enable submit button\n        var $branchInput = this.$wrap.find('input[name=\"protected_branch[name]\"]');\n        var $allowedToMergeInput = this.$wrap.find('input[name=\"protected_branch[merge_access_levels_attributes][0][access_level]\"]');\n        var $allowedToPushInput = this.$wrap.find('input[name=\"protected_branch[push_access_levels_attributes][0][access_level]\"]');\n\n        this.$form.find('input[type=\"submit\"]').attr('disabled', !($branchInput.val() && $allowedToMergeInput.length && $allowedToPushInput.length));\n      }\n    }]);\n\n    return _class;\n  }();\n})(window);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"jxF6\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function($) {function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* eslint-disable arrow-parens, no-param-reassign, no-new, comma-dangle */\n\n(function (global) {\n  global.gl = global.gl || {};\n\n  gl.ProtectedBranchEditList = function () {\n    function _class() {\n      _classCallCheck(this, _class);\n\n      this.$wrap = $('.protected-branches-list');\n\n      // Build edit forms\n      this.$wrap.find('.js-protected-branch-edit-form').each(function (i, el) {\n        new gl.ProtectedBranchEdit({\n          $wrap: $(el)\n        });\n      });\n    }\n\n    return _class;\n  }();\n})(window);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"lwLq\")))\n\n/***/ })\n\n},[\"3V7F\"]);\n\n\n// WEBPACK FOOTER //\n// protected_branches.fd808e43ba6d4ed167dd.bundle.js","require('./protected_branch_access_dropdown');\nrequire('./protected_branch_create');\nrequire('./protected_branch_dropdown');\nrequire('./protected_branch_edit');\nrequire('./protected_branch_edit_list');\n\n\n\n// WEBPACK FOOTER //\n// ./protected_branches/protected_branches_bundle.js","/* eslint-disable no-new, arrow-parens, no-param-reassign, comma-dangle, max-len */\n/* global Flash */\n\n(global => {\n  global.gl = global.gl || {};\n\n  gl.ProtectedBranchEdit = class {\n    constructor(options) {\n      this.$wrap = options.$wrap;\n      this.$allowedToMergeDropdown = this.$wrap.find('.js-allowed-to-merge');\n      this.$allowedToPushDropdown = this.$wrap.find('.js-allowed-to-push');\n\n      this.buildDropdowns();\n    }\n\n    buildDropdowns() {\n      // Allowed to merge dropdown\n      new gl.ProtectedBranchAccessDropdown({\n        $dropdown: this.$allowedToMergeDropdown,\n        data: gon.merge_access_levels,\n        onSelect: this.onSelect.bind(this)\n      });\n\n      // Allowed to push dropdown\n      new gl.ProtectedBranchAccessDropdown({\n        $dropdown: this.$allowedToPushDropdown,\n        data: gon.push_access_levels,\n        onSelect: this.onSelect.bind(this)\n      });\n    }\n\n    onSelect() {\n      const $allowedToMergeInput = this.$wrap.find(`input[name=\"${this.$allowedToMergeDropdown.data('fieldName')}\"]`);\n      const $allowedToPushInput = this.$wrap.find(`input[name=\"${this.$allowedToPushDropdown.data('fieldName')}\"]`);\n\n      // Do not update if one dropdown has not selected any option\n      if (!($allowedToMergeInput.length && $allowedToPushInput.length)) return;\n\n      this.$allowedToMergeDropdown.disable();\n      this.$allowedToPushDropdown.disable();\n\n      $.ajax({\n        type: 'POST',\n        url: this.$wrap.data('url'),\n        dataType: 'json',\n        data: {\n          _method: 'PATCH',\n          protected_branch: {\n            merge_access_levels_attributes: [{\n              id: this.$allowedToMergeDropdown.data('access-level-id'),\n              access_level: $allowedToMergeInput.val()\n            }],\n            push_access_levels_attributes: [{\n              id: this.$allowedToPushDropdown.data('access-level-id'),\n              access_level: $allowedToPushInput.val()\n            }]\n          }\n        },\n        error() {\n          $.scrollTo(0);\n          new Flash('Failed to update branch!');\n        }\n      }).always(() => {\n        this.$allowedToMergeDropdown.enable();\n        this.$allowedToPushDropdown.enable();\n      });\n    }\n  };\n})(window);\n\n\n\n// WEBPACK FOOTER //\n// ./protected_branches/protected_branch_edit.js","/* eslint-disable comma-dangle, no-unused-vars */\n\nclass ProtectedBranchDropdown {\n  constructor(options) {\n    this.onSelect = options.onSelect;\n    this.$dropdown = options.$dropdown;\n    this.$dropdownContainer = this.$dropdown.parent();\n    this.$dropdownFooter = this.$dropdownContainer.find('.dropdown-footer');\n    this.$protectedBranch = this.$dropdownContainer.find('.js-create-new-protected-branch');\n\n    this.buildDropdown();\n    this.bindEvents();\n\n    // Hide footer\n    this.$dropdownFooter.addClass('hidden');\n  }\n\n  buildDropdown() {\n    this.$dropdown.glDropdown({\n      data: this.getProtectedBranches.bind(this),\n      filterable: true,\n      remote: false,\n      search: {\n        fields: ['title']\n      },\n      selectable: true,\n      toggleLabel(selected) {\n        return (selected && 'id' in selected) ? selected.title : 'Protected Branch';\n      },\n      fieldName: 'protected_branch[name]',\n      text(protectedBranch) {\n        return _.escape(protectedBranch.title);\n      },\n      id(protectedBranch) {\n        return _.escape(protectedBranch.id);\n      },\n      onFilter: this.toggleCreateNewButton.bind(this),\n      clicked: (item, $el, e) => {\n        e.preventDefault();\n        this.onSelect();\n      }\n    });\n  }\n\n  bindEvents() {\n    this.$protectedBranch.on('click', this.onClickCreateWildcard.bind(this));\n  }\n\n  onClickCreateWildcard(e) {\n    e.preventDefault();\n\n    // Refresh the dropdown's data, which ends up calling `getProtectedBranches`\n    this.$dropdown.data('glDropdown').remote.execute();\n    this.$dropdown.data('glDropdown').selectRowAtIndex();\n  }\n\n  getProtectedBranches(term, callback) {\n    if (this.selectedBranch) {\n      callback(gon.open_branches.concat(this.selectedBranch));\n    } else {\n      callback(gon.open_branches);\n    }\n  }\n\n  toggleCreateNewButton(branchName) {\n    this.selectedBranch = {\n      title: branchName,\n      id: branchName,\n      text: branchName\n    };\n\n    if (branchName) {\n      this.$dropdownContainer\n        .find('.js-create-new-protected-branch code')\n        .text(branchName);\n    }\n\n    this.$dropdownFooter.toggleClass('hidden', !branchName);\n  }\n}\n\nwindow.ProtectedBranchDropdown = ProtectedBranchDropdown;\n\n\n\n// WEBPACK FOOTER //\n// ./protected_branches/protected_branch_dropdown.js","/* eslint-disable arrow-parens, no-param-reassign, object-shorthand, no-else-return, comma-dangle, max-len */\n\n(global => {\n  global.gl = global.gl || {};\n\n  gl.ProtectedBranchAccessDropdown = class {\n    constructor(options) {\n      const { $dropdown, data, onSelect } = options;\n\n      $dropdown.glDropdown({\n        data: data,\n        selectable: true,\n        inputId: $dropdown.data('input-id'),\n        fieldName: $dropdown.data('field-name'),\n        toggleLabel(item, el) {\n          if (el.is('.is-active')) {\n            return item.text;\n          } else {\n            return 'Select';\n          }\n        },\n        clicked(item, $el, e) {\n          e.preventDefault();\n          onSelect();\n        }\n      });\n    }\n  };\n})(window);\n\n\n\n// WEBPACK FOOTER //\n// ./protected_branches/protected_branch_access_dropdown.js","/* eslint-disable no-new, arrow-parens, no-param-reassign, comma-dangle, max-len */\n/* global ProtectedBranchDropdown */\n\n(global => {\n  global.gl = global.gl || {};\n\n  gl.ProtectedBranchCreate = class {\n    constructor() {\n      this.$wrap = this.$form = $('#new_protected_branch');\n      this.buildDropdowns();\n    }\n\n    buildDropdowns() {\n      const $allowedToMergeDropdown = this.$wrap.find('.js-allowed-to-merge');\n      const $allowedToPushDropdown = this.$wrap.find('.js-allowed-to-push');\n\n      // Cache callback\n      this.onSelectCallback = this.onSelect.bind(this);\n\n      // Allowed to Merge dropdown\n      new gl.ProtectedBranchAccessDropdown({\n        $dropdown: $allowedToMergeDropdown,\n        data: gon.merge_access_levels,\n        onSelect: this.onSelectCallback\n      });\n\n      // Allowed to Push dropdown\n      new gl.ProtectedBranchAccessDropdown({\n        $dropdown: $allowedToPushDropdown,\n        data: gon.push_access_levels,\n        onSelect: this.onSelectCallback\n      });\n\n      // Select default\n      $allowedToPushDropdown.data('glDropdown').selectRowAtIndex(0);\n      $allowedToMergeDropdown.data('glDropdown').selectRowAtIndex(0);\n\n      // Protected branch dropdown\n      new ProtectedBranchDropdown({\n        $dropdown: this.$wrap.find('.js-protected-branch-select'),\n        onSelect: this.onSelectCallback\n      });\n    }\n\n    // This will run after clicked callback\n    onSelect() {\n      // Enable submit button\n      const $branchInput = this.$wrap.find('input[name=\"protected_branch[name]\"]');\n      const $allowedToMergeInput = this.$wrap.find('input[name=\"protected_branch[merge_access_levels_attributes][0][access_level]\"]');\n      const $allowedToPushInput = this.$wrap.find('input[name=\"protected_branch[push_access_levels_attributes][0][access_level]\"]');\n\n      this.$form.find('input[type=\"submit\"]').attr('disabled', !($branchInput.val() && $allowedToMergeInput.length && $allowedToPushInput.length));\n    }\n  };\n})(window);\n\n\n\n// WEBPACK FOOTER //\n// ./protected_branches/protected_branch_create.js","/* eslint-disable arrow-parens, no-param-reassign, no-new, comma-dangle */\n\n(global => {\n  global.gl = global.gl || {};\n\n  gl.ProtectedBranchEditList = class {\n    constructor() {\n      this.$wrap = $('.protected-branches-list');\n\n      // Build edit forms\n      this.$wrap.find('.js-protected-branch-edit-form').each((i, el) => {\n        new gl.ProtectedBranchEdit({\n          $wrap: $(el)\n        });\n      });\n    }\n  };\n})(window);\n\n\n\n// WEBPACK FOOTER //\n// ./protected_branches/protected_branch_edit_list.js"],"sourceRoot":""}